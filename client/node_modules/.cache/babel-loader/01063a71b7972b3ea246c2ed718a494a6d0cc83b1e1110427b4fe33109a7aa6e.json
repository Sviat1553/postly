{"ast":null,"code":"var _jsxFileName = \"/Users/Inspater/Desktop/postly/client/src/components/Posts.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Posts() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [editingPost, setEditingPost] = useState(null);\n\n  // Fetch posts\n  const fetchPosts = async () => {\n    const response = await fetch(\"/posts\");\n    const data = await response.json();\n    console.log(data);\n    setPosts(data);\n    console.log(posts);\n  };\n\n  // Handle create\n  const createPost = async e => {\n    e.preventDefault();\n    if (editingPost) {\n      updatePost();\n    } else {\n      const response = await fetch(\"/posts\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title,\n          body\n        })\n      });\n      const data = await response.json();\n      setPosts([data, ...posts]);\n    }\n    setTitle(\"\");\n    setBody(\"\");\n    setEditingPost(null);\n  };\n\n  // Handle edit\n  const editPost = post => {\n    setTitle(post.title);\n    setBody(post.body);\n    setEditingPost(post);\n  };\n\n  // Handle update\n  const updatePost = async () => {\n    const updatedPost = {\n      ...editingPost,\n      title,\n      body\n    };\n    const response = await fetch(`/posts/${updatedPost._id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(updatedPost)\n    });\n    if (response.ok) {\n      setPosts(posts.map(post => post._id === updatedPost._id ? updatedPost : post));\n    }\n  };\n\n  // Handle delete\n  const deletePost = async id => {\n    const response = await fetch(`/posts/${id}`, {\n      method: \"DELETE\"\n    });\n    if (response.ok) {\n      setPosts(posts.filter(post => post._id !== id));\n    }\n  };\n\n  // UseEffect to run fetchPosts on mount\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.body\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => editPost(post),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deletePost(post._id),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, post._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: createPost,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: title,\n        onChange: e => setTitle(e.target.value),\n        placeholder: \"Title\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: body,\n        onChange: e => setBody(e.target.value),\n        placeholder: \"Body\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: editingPost ? \"Update Post\" : \"Add New Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(Posts, \"NImrx5yzqVJsocWjBmALv0Qiwfc=\");\n_c = Posts;\nexport default Posts;\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Posts","_s","posts","setPosts","title","setTitle","body","setBody","editingPost","setEditingPost","fetchPosts","response","fetch","data","json","console","log","createPost","e","preventDefault","updatePost","method","headers","JSON","stringify","editPost","post","updatedPost","_id","ok","map","deletePost","id","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSubmit","type","value","onChange","target","placeholder","required","_c","$RefreshReg$"],"sources":["/Users/Inspater/Desktop/postly/client/src/components/Posts.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nfunction Posts() {\n  const [posts, setPosts] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [editingPost, setEditingPost] = useState(null);\n\n  // Fetch posts\n  const fetchPosts = async () => {\n    const response = await fetch(\"/posts\");\n    const data = await response.json();\n    console.log(data);\n    setPosts(data);\n    console.log(posts);\n  };\n\n  // Handle create\n  const createPost = async (e) => {\n    e.preventDefault();\n    if (editingPost) {\n      updatePost();\n    } else {\n      const response = await fetch(\"/posts\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({ title, body })\n      });\n      const data = await response.json();\n      setPosts([data, ...posts]);\n    }\n    setTitle(\"\");\n    setBody(\"\");\n    setEditingPost(null);\n  };\n\n  // Handle edit\n  const editPost = (post) => {\n    setTitle(post.title);\n    setBody(post.body);\n    setEditingPost(post);\n  };\n\n  // Handle update\n  const updatePost = async () => {\n    const updatedPost = { ...editingPost, title, body };\n    const response = await fetch(`/posts/${updatedPost._id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(updatedPost)\n    });\n    if (response.ok) {\n      setPosts(posts.map((post) => (post._id === updatedPost._id ? updatedPost : post)));\n    }\n  };\n\n  // Handle delete\n  const deletePost = async (id) => {\n    const response = await fetch(`/posts/${id}`, {\n      method: \"DELETE\",\n    });\n    if (response.ok) {\n      setPosts(posts.filter((post) => post._id !== id));\n    }\n  };\n\n  // UseEffect to run fetchPosts on mount\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  return (\n    <div>\n      <h2>Posts</h2>\n      {posts.map((post) => (\n        <div key={post._id}>\n          <h3>{post.title}</h3>\n          <p>{post.body}</p>\n          <button onClick={() => editPost(post)}>Edit</button>\n          <button onClick={() => deletePost(post._id)}>Delete</button>\n        </div>\n      ))}\n      <form onSubmit={createPost}>\n        <input\n          type=\"text\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          placeholder=\"Title\"\n          required\n        />\n        <textarea\n          value={body}\n          onChange={(e) => setBody(e.target.value)}\n          placeholder=\"Body\"\n          required\n        />\n        <button type=\"submit\">{editingPost ? \"Update Post\" : \"Add New Post\"}</button>\n      </form>\n    </div>\n  );\n}\n\nexport default Posts;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}