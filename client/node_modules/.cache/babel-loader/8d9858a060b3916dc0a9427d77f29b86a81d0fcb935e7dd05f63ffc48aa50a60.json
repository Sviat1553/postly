{"ast":null,"code":"var _jsxFileName = \"/Users/Inspater/Desktop/postly/client/src/components/Posts.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Post from \"./Post\";\nimport { TextField, Button, Typography, Box } from \"@mui/material\";\nimport Container from '@mui/material/Container';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Posts() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [newTitle, setNewTitle] = useState(\"\");\n  const [newContent, setNewContent] = useState(\"\");\n  const [newAuthor, setNewAuthor] = useState(\"\");\n  const fetchPosts = async () => {\n    const response = await fetch(\"/posts\");\n    const data = await response.json();\n    setPosts(data);\n  };\n  const createPost = async e => {\n    e.preventDefault();\n    const response = await fetch(\"/posts\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        title: newTitle,\n        content: newContent,\n        author: newAuthor\n      })\n    });\n    const data = await response.json();\n    setPosts([data, ...posts]);\n    setNewTitle(\"\");\n    setNewContent(\"\");\n    setNewAuthor(\"\");\n  };\n  const updatePost = async (id, title, content, author) => {\n    const response = await fetch(`/posts/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        title,\n        content,\n        author\n      })\n    });\n    const data = await response.json();\n    setPosts(posts.map(post => post._id === id ? data : post));\n  };\n  const deletePost = async id => {\n    const response = await fetch(`/posts/${id}`, {\n      method: \"DELETE\"\n    });\n    if (response.ok) {\n      setPosts(posts.filter(post => post._id !== id));\n    }\n  };\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      align: \"center\",\n      gutterBottom: true,\n      children: \"Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      component: \"form\",\n      onSubmit: createPost,\n      sx: {\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Author\",\n        type: \"text\",\n        value: newAuthor,\n        onChange: e => setNewAuthor(e.target.value),\n        fullWidth: true,\n        variant: \"outlined\",\n        required: true,\n        sx: {\n          mb: 2\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Title\",\n        type: \"text\",\n        value: newTitle,\n        onChange: e => setNewTitle(e.target.value),\n        fullWidth: true,\n        variant: \"outlined\",\n        required: true,\n        sx: {\n          mb: 2\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Content\",\n        value: newContent,\n        onChange: e => setNewContent(e.target.value),\n        fullWidth: true,\n        variant: \"outlined\",\n        required: true,\n        sx: {\n          mb: 2\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        variant: \"contained\",\n        children: \"Add New Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      post: post,\n      editPost: updatePost,\n      deletePost: deletePost\n    }, post._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(Posts, \"pwYsDuXTD/gbcwLw8FQXM5Pp8Fk=\");\n_c = Posts;\nexport default Posts;\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["React","useEffect","useState","Post","TextField","Button","Typography","Box","Container","jsxDEV","_jsxDEV","Posts","_s","posts","setPosts","newTitle","setNewTitle","newContent","setNewContent","newAuthor","setNewAuthor","fetchPosts","response","fetch","data","json","createPost","e","preventDefault","method","headers","body","JSON","stringify","title","content","author","updatePost","id","map","post","_id","deletePost","ok","filter","children","variant","align","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","component","onSubmit","sx","mb","label","type","value","onChange","target","fullWidth","required","editPost","_c","$RefreshReg$"],"sources":["/Users/Inspater/Desktop/postly/client/src/components/Posts.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Post from \"./Post\";\nimport { TextField, Button, Typography, Box } from \"@mui/material\";\nimport Container from '@mui/material/Container';\n\nfunction Posts() {\n  const [posts, setPosts] = useState([]);\n  const [newTitle, setNewTitle] = useState(\"\");\n  const [newContent, setNewContent] = useState(\"\");\n  const [newAuthor, setNewAuthor] = useState(\"\");\n\n  const fetchPosts = async () => {\n    const response = await fetch(\"/posts\");\n    const data = await response.json();\n    setPosts(data);\n  };\n\n  const createPost = async (e) => {\n    e.preventDefault();\n    const response = await fetch(\"/posts\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ title: newTitle, content: newContent, author: newAuthor }),\n    });\n    const data = await response.json();\n    setPosts([data, ...posts]);\n    setNewTitle(\"\");\n    setNewContent(\"\");\n    setNewAuthor(\"\");\n  };\n\n  const updatePost = async (id, title, content, author) => {\n    const response = await fetch(`/posts/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ title, content, author }),\n    });\n    const data = await response.json();\n    setPosts(posts.map((post) => (post._id === id ? data : post)));\n  };\n\n  const deletePost = async (id) => {\n    const response = await fetch(`/posts/${id}`, {\n      method: \"DELETE\",\n    });\n    if (response.ok) {\n      setPosts(posts.filter((post) => post._id !== id));\n    }\n  };\n\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  return (\n    <Container>\n      <Typography variant=\"h4\" align=\"center\" gutterBottom>Posts</Typography>\n      <Box component=\"form\" onSubmit={createPost} sx={{ mb: 4 }}>\n        <TextField\n          label=\"Author\"\n          type=\"text\"\n          value={newAuthor}\n          onChange={(e) => setNewAuthor(e.target.value)}\n          fullWidth\n          variant=\"outlined\"\n          required\n          sx={{ mb: 2 }}\n        />\n        <TextField\n          label=\"Title\"\n          type=\"text\"\n          value={newTitle}\n          onChange={(e) => setNewTitle(e.target.value)}\n          fullWidth\n          variant=\"outlined\"\n          required\n          sx={{ mb: 2 }}\n        />\n        <TextField\n          label=\"Content\"\n          value={newContent}\n          onChange={(e) => setNewContent(e.target.value)}\n          fullWidth\n          variant=\"outlined\"\n          required\n          sx={{ mb: 2 }}\n        />\n        <Button type=\"submit\" variant=\"contained\">Add New Post</Button>\n      </Box>\n      {posts.map((post) => (\n        <Post key={post._id} post={post} editPost={updatePost} deletePost={deletePost} />\n      ))}\n    </Container>\n  );\n}\n\nexport default Posts;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}